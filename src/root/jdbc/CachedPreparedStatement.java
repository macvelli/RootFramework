/*
 * Copyright 2006-2016 Edward Smith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package root.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

import root.annotation.Delegate;
import root.log.Log;
import root.util.Jdbc;

/**
 * Crafting delegate classes of JDBC interfaces sucks.
 *
 * @author Edward Smith
 * @version 0.5
 * @since 0.5
 */
@Delegate
final class CachedPreparedStatement implements java.sql.PreparedStatement {

	// <><><><><><><><><><><><><><><> Constants <><><><><><><><><><><><><><><>

	private static final Log log = new Log(CachedPreparedStatement.class);

	// <><><><><><><><><><><><><><><> Attributes <><><><><><><><><><><><><><><>

	/** Keeps track of when the statement has thrown an {@link SQLException} */
	private boolean hasError;

	/** The SQL statement being cached by this class */
	private final CachedSQLStatement cachedSqlStmt;

	/** The {@link PooledConnection} that generated this class */
	private final PooledConnection con;

	/** The wrapped {@link PreparedStatement} */
	final PreparedStatement stmt;

	// <><><><><><><><><><><><><><>< Constructors ><><><><><><><><><><><><><><>

	CachedPreparedStatement(final PooledConnection con, final PreparedStatement stmt, final CachedSQLStatement cachedSqlStmt) {
		this.con = con;
		this.stmt = stmt;
		this.cachedSqlStmt = cachedSqlStmt;
	}

	// <><><><><><><><><><><><><><> Public Methods <><><><><><><><><><><><><><>

	@Override
	public final void addBatch() throws SQLException {
		try {
			this.stmt.addBatch();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void addBatch(final String sql) throws SQLException {
		try {
			this.stmt.addBatch(sql);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void cancel() throws SQLException {
		try {
			this.stmt.cancel();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void clearBatch() throws SQLException {
		try {
			this.stmt.clearBatch();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void clearParameters() throws SQLException {
		try {
			this.stmt.clearParameters();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void clearWarnings() throws SQLException {
		try {
			this.stmt.clearWarnings();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void close() throws SQLException {
		if (this.hasError) {
			log.error("Closing Cached SQL Statement [{P}]", this.cachedSqlStmt);
			this.con.stmtCache.remove(this.cachedSqlStmt);
			Jdbc.close(this.stmt);
		} else {
			this.clearParameters();
		}
	}

	@Override
	public final void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final boolean execute() throws SQLException {
		try {
			return this.stmt.execute();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final boolean execute(final String sql) throws SQLException {
		try {
			return this.stmt.execute(sql);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
		try {
			return this.stmt.execute(sql, autoGeneratedKeys);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
		try {
			return this.stmt.execute(sql, columnIndexes);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final boolean execute(final String sql, final String[] columnNames) throws SQLException {
		try {
			return this.stmt.execute(sql, columnNames);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int[] executeBatch() throws SQLException {
		try {
			return this.stmt.executeBatch();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final ResultSet executeQuery() throws SQLException {
		try {
			return this.stmt.executeQuery();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final ResultSet executeQuery(final String sql) throws SQLException {
		try {
			return this.stmt.executeQuery(sql);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int executeUpdate() throws SQLException {
		try {
			return this.stmt.executeUpdate();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int executeUpdate(final String sql) throws SQLException {
		try {
			return this.stmt.executeUpdate(sql);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
		try {
			return this.stmt.executeUpdate(sql, autoGeneratedKeys);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
		try {
			return this.stmt.executeUpdate(sql, columnIndexes);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
		try {
			return this.stmt.executeUpdate(sql, columnNames);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final Connection getConnection() throws SQLException {
		try {
			return this.stmt.getConnection();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getFetchDirection() throws SQLException {
		try {
			return this.stmt.getFetchDirection();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getFetchSize() throws SQLException {
		try {
			return this.stmt.getFetchSize();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final ResultSet getGeneratedKeys() throws SQLException {
		try {
			return this.stmt.getGeneratedKeys();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getMaxFieldSize() throws SQLException {
		try {
			return this.stmt.getMaxFieldSize();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getMaxRows() throws SQLException {
		try {
			return this.stmt.getMaxRows();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final ResultSetMetaData getMetaData() throws SQLException {
		try {
			return this.stmt.getMetaData();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final boolean getMoreResults() throws SQLException {
		try {
			return this.stmt.getMoreResults();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final boolean getMoreResults(final int current) throws SQLException {
		try {
			return this.stmt.getMoreResults(current);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final ParameterMetaData getParameterMetaData() throws SQLException {
		try {
			return this.stmt.getParameterMetaData();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getQueryTimeout() throws SQLException {
		try {
			return this.stmt.getQueryTimeout();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final ResultSet getResultSet() throws SQLException {
		try {
			return this.stmt.getResultSet();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getResultSetConcurrency() throws SQLException {
		try {
			return this.stmt.getResultSetConcurrency();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getResultSetHoldability() throws SQLException {
		try {
			return this.stmt.getResultSetHoldability();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getResultSetType() throws SQLException {
		try {
			return this.stmt.getResultSetType();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final int getUpdateCount() throws SQLException {
		try {
			return this.stmt.getUpdateCount();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final SQLWarning getWarnings() throws SQLException {
		try {
			return this.stmt.getWarnings();
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final boolean isClosed() throws SQLException {
		return false;
	}

	@Override
	public final boolean isCloseOnCompletion() throws SQLException {
		return false;
	}

	@Override
	public final boolean isPoolable() throws SQLException {
		return true;
	}

	@Override
	public final boolean isWrapperFor(final Class<?> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setArray(final int i, final Array x) throws SQLException {
		try {
			this.stmt.setArray(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setAsciiStream(final int i, final InputStream x) throws SQLException {
		try {
			this.stmt.setAsciiStream(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setAsciiStream(final int i, final InputStream x, final int length) throws SQLException {
		try {
			this.stmt.setAsciiStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setAsciiStream(final int i, final InputStream x, final long length) throws SQLException {
		try {
			this.stmt.setAsciiStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBigDecimal(final int i, final BigDecimal x) throws SQLException {
		try {
			this.stmt.setBigDecimal(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBinaryStream(final int i, final InputStream x) throws SQLException {
		try {
			this.stmt.setBinaryStream(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBinaryStream(final int i, final InputStream x, final int length) throws SQLException {
		try {
			this.stmt.setBinaryStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBinaryStream(final int i, final InputStream x, final long length) throws SQLException {
		try {
			this.stmt.setBinaryStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBlob(final int i, final Blob x) throws SQLException {
		try {
			this.stmt.setBlob(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBlob(final int i, final InputStream x) throws SQLException {
		try {
			this.stmt.setBlob(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBlob(final int i, final InputStream x, final long length) throws SQLException {
		try {
			this.stmt.setBlob(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBoolean(final int i, final boolean x) throws SQLException {
		try {
			this.stmt.setBoolean(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setByte(final int i, final byte x) throws SQLException {
		try {
			this.stmt.setByte(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setBytes(final int i, final byte[] x) throws SQLException {
		try {
			this.stmt.setBytes(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setCharacterStream(final int i, final Reader x) throws SQLException {
		try {
			this.stmt.setCharacterStream(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setCharacterStream(final int i, final Reader x, final int length) throws SQLException {
		try {
			this.stmt.setCharacterStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setCharacterStream(final int i, final Reader x, final long length) throws SQLException {
		try {
			this.stmt.setCharacterStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setClob(final int i, final Clob x) throws SQLException {
		try {
			this.stmt.setClob(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setClob(final int i, final Reader x) throws SQLException {
		try {
			this.stmt.setClob(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setClob(final int i, final Reader x, final long length) throws SQLException {
		try {
			this.stmt.setClob(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setCursorName(final String name) throws SQLException {
		try {
			this.stmt.setCursorName(name);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setDate(final int i, final Date x) throws SQLException {
		try {
			this.stmt.setDate(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setDate(final int i, final Date x, final Calendar cal) throws SQLException {
		try {
			this.stmt.setDate(i, x, cal);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setDouble(final int i, final double x) throws SQLException {
		try {
			this.stmt.setDouble(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setEscapeProcessing(final boolean enable) throws SQLException {
		try {
			this.stmt.setEscapeProcessing(enable);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setFetchDirection(final int direction) throws SQLException {
		try {
			this.stmt.setFetchDirection(direction);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setFetchSize(final int rows) throws SQLException {
		try {
			this.stmt.setFetchSize(rows);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setFloat(final int i, final float x) throws SQLException {
		try {
			this.stmt.setFloat(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setInt(final int i, final int x) throws SQLException {
		try {
			this.stmt.setInt(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setLong(final int i, final long x) throws SQLException {
		try {
			this.stmt.setLong(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setMaxFieldSize(final int max) throws SQLException {
		try {
			this.stmt.setMaxFieldSize(max);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setMaxRows(final int max) throws SQLException {
		try {
			this.stmt.setMaxRows(max);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNCharacterStream(final int i, final Reader x) throws SQLException {
		try {
			this.stmt.setNCharacterStream(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNCharacterStream(final int i, final Reader x, final long length) throws SQLException {
		try {
			this.stmt.setNCharacterStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNClob(final int i, final NClob x) throws SQLException {
		try {
			this.stmt.setNClob(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNClob(final int i, final Reader x) throws SQLException {
		try {
			this.stmt.setNClob(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNClob(final int i, final Reader x, final long length) throws SQLException {
		try {
			this.stmt.setNClob(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNString(final int i, final String x) throws SQLException {
		try {
			this.stmt.setNString(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNull(final int i, final int sqlType) throws SQLException {
		try {
			this.stmt.setNull(i, sqlType);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setNull(final int i, final int sqlType, final String typeName) throws SQLException {
		try {
			this.stmt.setNull(i, sqlType, typeName);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setObject(final int i, final Object x) throws SQLException {
		try {
			this.stmt.setObject(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setObject(final int i, final Object x, final int targetSqlType) throws SQLException {
		try {
			this.stmt.setObject(i, x, targetSqlType);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setObject(final int i, final Object x, final int targetSqlType, final int scale) throws SQLException {
		try {
			this.stmt.setObject(i, x, targetSqlType, scale);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setPoolable(final boolean poolable) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setQueryTimeout(final int seconds) throws SQLException {
		try {
			this.stmt.setQueryTimeout(seconds);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setRef(final int i, final Ref x) throws SQLException {
		try {
			this.stmt.setRef(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setRowId(final int i, final RowId x) throws SQLException {
		try {
			this.stmt.setRowId(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setShort(final int i, final short x) throws SQLException {
		try {
			this.stmt.setShort(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setSQLXML(final int i, final SQLXML x) throws SQLException {
		try {
			this.stmt.setSQLXML(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setString(final int i, final String x) throws SQLException {
		try {
			this.stmt.setString(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setTime(final int i, final Time x) throws SQLException {
		try {
			this.stmt.setTime(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setTime(final int i, final Time x, final Calendar cal) throws SQLException {
		try {
			this.stmt.setTime(i, x, cal);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setTimestamp(final int i, final Timestamp x) throws SQLException {
		try {
			this.stmt.setTimestamp(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setTimestamp(final int i, final Timestamp x, final Calendar cal) throws SQLException {
		try {
			this.stmt.setTimestamp(i, x, cal);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	@Deprecated
	public final void setUnicodeStream(final int i, final InputStream x, final int length) throws SQLException {
		try {
			this.stmt.setUnicodeStream(i, x, length);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final void setURL(final int i, final URL x) throws SQLException {
		try {
			this.stmt.setURL(i, x);
		} catch (final SQLException e) {
			log.error(this.cachedSqlStmt, e);
			this.hasError = true;
			throw e;
		}
	}

	@Override
	public final <T> T unwrap(final Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

} // End CachedPreparedStatement
